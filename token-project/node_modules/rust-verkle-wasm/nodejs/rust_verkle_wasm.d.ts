/* tslint:disable */
/* eslint-disable */
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_add(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_sub(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_mul(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_div(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @returns {FrWrapper}
*/
export function fr_sqrt(lhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @returns {FrWrapper}
*/
export function fr_square(lhs: FrWrapper): FrWrapper;
/**
* @param {Array<any>} arr
* @returns {ElementWrapper}
*/
export function commit_scalar_values(arr: Array<any>): ElementWrapper;
/**
* @param {Uint8Array} address_tree_index
* @returns {any}
*/
export function pedersen_hash(address_tree_index: Uint8Array): any;
/**
* @param {Uint8Array} js_root
* @param {Uint8Array} js_proof
* @param {Map<any, any>} js_key_values
* @returns {any}
*/
export function verify_update(js_root: Uint8Array, js_proof: Uint8Array, js_key_values: Map<any, any>): any;
/**
* @param {ElementWrapper} lhs
* @param {ElementWrapper} rhs
* @returns {ElementWrapper}
*/
export function element_add(lhs: ElementWrapper, rhs: ElementWrapper): ElementWrapper;
/**
* @param {ElementWrapper} lhs
* @param {ElementWrapper} rhs
* @returns {ElementWrapper}
*/
export function element_sub(lhs: ElementWrapper, rhs: ElementWrapper): ElementWrapper;
/**
*/
export class ElementWrapper {
  free(): void;
/**
* @param {Uint8Array} bytes
* @returns {ElementWrapper}
*/
  static fromBytes(bytes: Uint8Array): ElementWrapper;
/**
* @returns {ElementWrapper}
*/
  static generator(): ElementWrapper;
/**
* @param {ElementWrapper} element_wrapper
* @param {FrWrapper} scalar_wrapper
* @returns {ElementWrapper}
*/
  static scalarMul(element_wrapper: ElementWrapper, scalar_wrapper: FrWrapper): ElementWrapper;
/**
* @returns {ElementWrapper}
*/
  static zero(): ElementWrapper;
/**
* @returns {string}
*/
  toHexString(): string;
/**
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* @returns {FrWrapper}
*/
  mapToScalarField(): FrWrapper;
}
/**
*/
export class FrWrapper {
  free(): void;
/**
* @param {Uint8Array} bytes
* @returns {FrWrapper}
*/
  static fromBytes(bytes: Uint8Array): FrWrapper;
/**
* @param {string} string
* @returns {FrWrapper}
*/
  static fromDecimalString(string: string): FrWrapper;
/**
* @returns {FrWrapper}
*/
  static _default(): FrWrapper;
/**
* @returns {string}
*/
  toHexString(): string;
/**
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* @returns {SerializableFrWrapper}
*/
  toSerializableWrapper(): SerializableFrWrapper;
}
/**
*/
export class SerializableFrWrapper {
  free(): void;
}
