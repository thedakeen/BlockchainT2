/* tslint:disable */
/* eslint-disable */
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_add(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_sub(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_mul(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @param {FrWrapper} rhs
* @returns {FrWrapper}
*/
export function fr_div(lhs: FrWrapper, rhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @returns {FrWrapper}
*/
export function fr_sqrt(lhs: FrWrapper): FrWrapper;
/**
* @param {FrWrapper} lhs
* @returns {FrWrapper}
*/
export function fr_square(lhs: FrWrapper): FrWrapper;
/**
* @param {Array<any>} arr
* @returns {ElementWrapper}
*/
export function commit_scalar_values(arr: Array<any>): ElementWrapper;
/**
* @param {Uint8Array} address_tree_index
* @returns {any}
*/
export function pedersen_hash(address_tree_index: Uint8Array): any;
/**
* @param {Uint8Array} js_root
* @param {Uint8Array} js_proof
* @param {Map<any, any>} js_key_values
* @returns {any}
*/
export function verify_update(js_root: Uint8Array, js_proof: Uint8Array, js_key_values: Map<any, any>): any;
/**
* @param {ElementWrapper} lhs
* @param {ElementWrapper} rhs
* @returns {ElementWrapper}
*/
export function element_add(lhs: ElementWrapper, rhs: ElementWrapper): ElementWrapper;
/**
* @param {ElementWrapper} lhs
* @param {ElementWrapper} rhs
* @returns {ElementWrapper}
*/
export function element_sub(lhs: ElementWrapper, rhs: ElementWrapper): ElementWrapper;
/**
*/
export class ElementWrapper {
  free(): void;
/**
* @param {Uint8Array} bytes
* @returns {ElementWrapper}
*/
  static fromBytes(bytes: Uint8Array): ElementWrapper;
/**
* @returns {ElementWrapper}
*/
  static generator(): ElementWrapper;
/**
* @param {ElementWrapper} element_wrapper
* @param {FrWrapper} scalar_wrapper
* @returns {ElementWrapper}
*/
  static scalarMul(element_wrapper: ElementWrapper, scalar_wrapper: FrWrapper): ElementWrapper;
/**
* @returns {ElementWrapper}
*/
  static zero(): ElementWrapper;
/**
* @returns {string}
*/
  toHexString(): string;
/**
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* @returns {FrWrapper}
*/
  mapToScalarField(): FrWrapper;
}
/**
*/
export class FrWrapper {
  free(): void;
/**
* @param {Uint8Array} bytes
* @returns {FrWrapper}
*/
  static fromBytes(bytes: Uint8Array): FrWrapper;
/**
* @param {string} string
* @returns {FrWrapper}
*/
  static fromDecimalString(string: string): FrWrapper;
/**
* @returns {FrWrapper}
*/
  static _default(): FrWrapper;
/**
* @returns {string}
*/
  toHexString(): string;
/**
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* @returns {SerializableFrWrapper}
*/
  toSerializableWrapper(): SerializableFrWrapper;
}
/**
*/
export class SerializableFrWrapper {
  free(): void;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_frwrapper_free: (a: number) => void;
  readonly fr_add: (a: number, b: number) => number;
  readonly fr_sub: (a: number, b: number) => number;
  readonly fr_mul: (a: number, b: number) => number;
  readonly fr_div: (a: number, b: number) => number;
  readonly fr_sqrt: (a: number, b: number) => void;
  readonly fr_square: (a: number, b: number) => void;
  readonly frwrapper_fromBytes: (a: number, b: number, c: number) => void;
  readonly frwrapper_fromDecimalString: (a: number, b: number, c: number) => void;
  readonly frwrapper__default: () => number;
  readonly frwrapper_toHexString: (a: number, b: number) => void;
  readonly frwrapper_toBytes: (a: number, b: number) => void;
  readonly frwrapper_toSerializableWrapper: (a: number) => number;
  readonly __wbg_serializablefrwrapper_free: (a: number) => void;
  readonly commit_scalar_values: (a: number, b: number) => void;
  readonly pedersen_hash: (a: number) => number;
  readonly verify_update: (a: number, b: number, c: number) => number;
  readonly __wbg_elementwrapper_free: (a: number) => void;
  readonly element_add: (a: number, b: number) => number;
  readonly element_sub: (a: number, b: number) => number;
  readonly elementwrapper_fromBytes: (a: number, b: number, c: number) => void;
  readonly elementwrapper_generator: () => number;
  readonly elementwrapper_scalarMul: (a: number, b: number) => number;
  readonly elementwrapper_zero: () => number;
  readonly elementwrapper_toHexString: (a: number, b: number) => void;
  readonly elementwrapper_toBytes: (a: number, b: number) => void;
  readonly elementwrapper_mapToScalarField: (a: number) => number;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
